name: 'publish'

on:
  workflow_dispatch:

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            platform: 'macos-aarch64'
          - runner: 'windows-latest'
            args: ''
            platform: 'windows'
          - runner: 'ubuntu-latest'
            args: ''
            platform: 'ubuntu'

    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf librust-alsa-sys-dev
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm' # Set this to npm, yarn or pnpm.

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.runner == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: pnpm install # change this to npm or pnpm depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        id: tauri_build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}

      - name: Install jq
        if: matrix.platform != 'windows'
        uses: dcarbone/install-jq-action@v2.1.0

      - name: Parse artifact paths
        if: matrix.platform != 'windows'
        id: parse_paths
        run: |
          artifact_paths='${{ steps.tauri_build.outputs.artifactPaths }}'
          paths=$(echo "${artifact_paths}" | jq -r '.[]')
          echo "${paths}"
          echo "paths<<EOF" >> $GITHUB_OUTPUT
          echo "${paths}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Parse artifact paths
        if: matrix.platform == 'windows'
        id: parse_paths_windows
        run: |
          $artifactPaths = '${{ steps.tauri_build.outputs.artifactPaths }}'
          $paths = $artifactPaths | ConvertFrom-Json
          $paths -join "`n"
          "paths<<EOF" | Out-File -Append -FilePath $env:GITHUB_OUTPUT -Encoding utf8
          $paths | Out-File -Append -FilePath $env:GITHUB_OUTPUT -Encoding utf8
          "EOF" | Out-File -Append -FilePath $env:GITHUB_OUTPUT -Encoding utf8
        shell: pwsh

      - name: Upload artifact
        if: matrix.platform != 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }} 
          path: ${{ steps.parse_paths.outputs.paths }}

      - name: Upload artifact
        if: matrix.platform == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }} 
          path: ${{ steps.parse_paths_windows.outputs.paths }}

      - name: Upload portable artifact
        if: matrix.platform == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: portable-build-${{ matrix.platform }}
          path: src-tauri/target/release/rapidfire.exe
